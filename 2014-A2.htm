<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<!-- File   : 2014-A1.htm
     Author : Richard A. O'Keefe
     Updated: %G%
     Purpose: Concurrent programming, exercise 1.
-->
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Concurrent Programming Assignment 1</title>
</head>
<body>
<h1>Concurrent Programming, Assignment 2</h1>

<p>This year we're trying smaller assignments.</p>

<p>Write three programs to investigate the speed of passing
     information between two threads.
<p>Each program will contain one thread that generates
   1,000,000,000 random floating point numbers and sends them,
   and another thread that receives 1,000,000,000 floating point
   number and summarises them.
<p>The code will ook something like
<pre>
int const Number_Count = 1000*1000*1000;

void producer(void *dummy) {
    int a =  632559378;  // \ Wichmann-Hill (2006)
    int b = 1436901506;  // | 4-cycle random 
    int c =  244914893;  // | generator
    int d = 1907460368;  // / state.

    double const recip_a /* 1/2 147 483 579.0 */ =
        0.00000000046566130226972971885062316464865503867958;
    double const recip_b /* 1/2 147 483 543.0 */ =
        0.00000000046566131007598599324865699331694482745566;
    double const recip_c /* 1/2 147 483 423.0 */ =
        0.00000000046566133609684213147940094716158374741503;
    double const recip_d /* 1/2 147 483 123.0 */ =
        0.00000000046566140114899519981000567798175892812360;

    double w;   // The random number

    int i;               // Loop counter

    for (i = 0; i &lt; Number_Count; i++) {
	w  = recip_a * (double)(a = (int)((a * 11600LL) % 2147483579));
	w += recip_b * (double)(b = (int)((b * 47003LL) % 2147483543));
	w += recip_c * (double)(c = (int)((c * 23000LL) % 2147483423));
	w += recip_d * (double)(d = (int)((d * 33000LL) % 2147483123));
	if (w >= 2.0) w -= 2.0;
	if (w >= 1.0) w -= 1.0;

	&lt;lt;lt; somehow send w to the other thread &gt;&gt;&gt;
    }
}

void consumer(void *dummy) {
    int i;
    double x, v;
    double mean = 0.0, sum2 = 0.0;

    for (i = 0; i &lt; Number_Count; i++) {

	&lt;lt;lt; somehow receive x from the other thread &gt;&gt;&gt;

	v = (x - mean)/(i+1);
	sum2 += ((i+1)*v)*(i*v);
	mean += v;
    }
    printf("Mean = %g, standard deviation = %g\n",
           mean, sqrt(sum2/(i-1)));
}
</pre>

<p>The consumer() function uses (a simplified version of)
Spicer's provisional means algorithm for stably updating the
mean and sum of squared differences so that it does not have
to store a milliard numbers.  The algorithm was actually taken
from IBM's web site about the SPSS program.

<p>On my machine, putting both loops in the same function
does this:
<pre>
m% cc -O4 foo.c
m% ctime a.out
Mean = 0.5, standard deviation = 0.288667
28.200 user + 0.040 system = 28.240 total in 28.408 real seconds.
</pre>
<p>It would certainly be nice to have these running on different
cores.  Actually, we expect the cost of communicating to be
fairly high, so running on two cores with IPC might well be
<em>slower</em> than running on one core.

<p>You should have one version of your program that uses a pipe.
The pipe variable will be global.
The main() function will create it, and close it at the end.
The producer will use write(fd, &amp;w, sizeof w) to send and
the receiver will use read(fd, &amp;x, sizeof x) to receive.

<p>You should have one version of your program that uses a
&ldquo;bounded buffer&rdquo; in memory.  Use the header file
<a href="bbuf.h">bbuf.h</a> and the implementation
<a href="bbuf.c">bbuf.c</a>.  You'll notice the DBG(_) calls
in there from when I was confounded by the odd behaviour of
pthread_cond_notify() and the use of pthread_cond_broadcast()
instead, which could create thundering herd if several threads
wanted to write to one of these.

<p>You should have a third version of your program that uses
message queues.  If you do this on Linux or Solaris or HP-UX
or ... you can try POSIX message queues.  If you do this on
OpenBSD or Mac OS X you have to use System V message queues.

<p>All of these approaches do quite a lot of work per send+receive.
Try each method again, sending and receiving numbers in batches
of 100.

You should end up with 6 programs that compute the same answers,
but take different times.  You should end up with 24 times:

<table summary="how results are to be presented">
 <tr><th>Version<th>User <th>System <th>Total <th>Real
 <tr><th>Pipe,1   <td>.. <td>.. <td>.. <td>..
 <tr><th>MQ,1     <td>.. <td>.. <td>.. <td>..
 <tr><th>BBuf,1   <td>.. <td>.. <td>.. <td>..
 <tr><th>Pipe,100 <td>.. <td>.. <td>.. <td>..
 <tr><th>MQ,100   <td>.. <td>.. <td>.. <td>..
 <tr><th>BBuf,100 <td>.. <td>.. <td>.. <td>..
</table> 

<p>A convenient way to measure these times is to use my 'ctime'
   program, the source code for which is in <a href="ctime.c">ctime.c</a>.

<p>Like the previous assignment, this is 10%.  To really earn the
mark, you need to comment on the table.  You need to think about
the issues I mentioned in class, such as (but not limited to)
<ul>
 <li>Which approaches respect "record" boundaries and when?
 <li>Bandwidth (how fast can we pump data through these)?
 <li>Latency (how long does it take to get one message from A to B)?
 <li>Flow control
</ul>

<p>I had planned to give you three weeks for this to allow for the
key lecture being next week, but it ended up being this week, and
a fair bit of code has already been given you, so let's say 2 weeks
and see how that works.
</body>
</html>








